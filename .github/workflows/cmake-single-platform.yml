# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "ghactionscicd" ]
  pull_request:
    branches: [ "ghactionscicd" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: gcc/g++
        run: |
          sudo apt update
          sudo apt-get install gcc-13 g++-13

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Detect profile
        run: conan profile detect

      - name: Cache vcpkg dependencies
        uses: actions/cache@v4
        with:
            path: vcpkg_installed
            key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
            restore-keys: vcpkg-${{ runner.os }}

      - name: Install vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh

      - name: Install system libraries
        run: |
          sudo apt-get install curl zip unzip tar
          sudo apt-get install autoconf
          sudo apt-get install libtool
          sudo apt-get install libxcb-util0-dev
          sudo apt-get install libxcb-util-dev
          sudo apt-get install libxdamage-dev
          sudo apt-get install libegl-dev
          sudo apt-get install libegl1-mesa-dev
          sudo apt-get install libx11-dev
          sudo apt-get install libx11-xcb-dev
          sudo apt-get install libfontenc-dev
          sudo apt-get install libice-dev
          sudo apt-get install libsm-dev
          sudo apt-get install libxau-dev
          sudo apt-get install libxaw7-dev
          sudo apt-get install libxcomposite-dev
          sudo apt-get install libxcursor-dev
          sudo apt-get install libxfixes-dev
          sudo apt-get install libxi-dev
          sudo apt-get install libxinerama-dev
          sudo apt-get install libxkbfile-dev
          sudo apt-get install libxmuu-dev
          sudo apt-get install libxrandr-dev
          sudo apt-get install libxrender-dev
          sudo apt-get install libxres-dev
          sudo apt-get install libxss-dev
          sudo apt-get install libxtst-dev
          sudo apt-get install libxv-dev
          sudo apt-get install libxxf86vm-dev
          sudo apt-get install libxcb-glx0-dev
          sudo apt-get install libxcb-render0-dev
          sudo apt-get install libxcb-render-util0-dev
          sudo apt-get install libxcb-xkb-dev
          sudo apt-get install libxcb-icccm4-dev
          sudo apt-get install libxcb-image0-dev
          sudo apt-get install libxcb-keysyms1-dev
          sudo apt-get install libxcb-randr0-dev
          sudo apt-get install libxcb-shape0-dev
          sudo apt-get install libxcb-sync-dev
          sudo apt-get install libxcb-xfixes0-dev
          sudo apt-get install libxcb-xinerama0-dev
          sudo apt-get install libxcb-dri3-dev
          sudo apt-get install uuid-dev
          sudo apt-get install libxcb-cursor-dev
          sudo apt-get install libxcb-dri2-0-dev
          sudo apt-get install libxcb-dri3-dev
          sudo apt-get install libxcb-present-dev
          sudo apt-get install libxcb-composite0-dev
          sudo apt-get install libxcb-ewmh-dev
          sudo apt-get install libxcb-res0-dev

      - name: Install Dependencies from vcpkg.json
        run: |
          ./vcpkg/vcpkg integrate install
          ./vcpkg/vcpkg install --triplet=x64-linux

      - name: build
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        #run: ./bootstrap_linux.sh
        run: ./bootstrap_linux_cicd.sh